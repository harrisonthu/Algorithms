import java.awt.Color;

public class GobbleBoard {

	/**
	 * Number of rows.
	 */
	public static final int ROWS = 4;
	
	/**
	 * Number of columns.
	 */
	public static final int COLS = 4;
	
	private Color[][] spot = new Color [ROWS] [COLS];
	private Position p1;
	private Position p2;

// Exported constructors.

	/**
	 * Construct a new Go board. All spots are initially empty.
	 */
	public GobbleBoard(){
		for(int i =0; i<ROWS;i++){
			for(int j=0; j<COLS;j++){
				spot[i][j]= Color.yellow;
			}
		}
		spot[0][3] = Color.red;
		spot[3][0] = Color.blue;
		p1 = new Position(0,3);
		p2 = new Position(3,0);		
		}

	   /**
	    * Get the color of the given spot.
	    *
	    * @param  r  Row index, 0 .. ROWS-1.
	    * @param  c  Column index, 0 .. COLS-1.
	    *
	    * @return  Color, or null if the spot is empty.
	    */
	   public synchronized void setPlayer1(int row, int col){
		   
		   int oldrow = p1.getRow();
		   int oldcol = p1.getCol();
		   spot[oldrow][oldcol] = Color.white;
		   
		   p1.setRow(row);
		   p1.setCol(col);
		   spot[row][col] = Color.red;
	   }
	   
	   
	   
	   //void reset()
	   //blue and red to the first orignial position
	   
	   
	   
	   //boolean isValid(r,c)
	   
	   
	   /**
	    * Clear this Go board. All spots become empty.
	    */
	   public synchronized void clear()
	      {
	      for (int r = 0; r < ROWS; ++ r)
	         {
	         for (int c = 0; c < COLS; ++ c)
	            {
	            spot[r][c] = null;
	            }
	         }
	      }
	   
	   
	   
	   private class Position {
		   private int row;
		   private int col;
		   
		   
		   public Position(int row, int col){
			   this.row = row;
			   this.col = col;
		   }


		public int getRow() {
			return row;
		}


		public void setRow(int row) {
			this.row = row;
		}


		public int getCol() {
			return col;
		}


		public void setCol(int col) {
			this.col = col;
		}
		   
		   
		   
		   
		   
	   }

}
