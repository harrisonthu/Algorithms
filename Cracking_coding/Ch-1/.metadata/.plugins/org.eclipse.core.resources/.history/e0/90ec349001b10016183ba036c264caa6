//******************************************************************************
//
// File:    ServerReaderThread.java
// Package: ---
// Unit:    Class ServerReaderThread
//
// This Java source file is copyright (C) 2016 by Alan Kaminsky. All rights
// reserved. For further information, contact the author, Alan Kaminsky, at
// ark@cs.rit.edu.
//
// This Java source file is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 3 of the License, or (at your option) any
// later version.
//
// This Java source file is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
// details.
//
// You may obtain a copy of the GNU General Public License on the World Wide Web
// at http://www.gnu.org/licenses/gpl.html.
//
//******************************************************************************

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;

/**
 * Class ServerReaderThread provides a thread that receives messages from
 * clients in the DNS application.
 *
 * @author  Alan Kaminsky
 * @version 15-Mar-2016
 */
public class ServerReaderThread
   extends Thread
   {

// Hidden data members.

   private DatagramSocket mailbox;
   private ViewListener viewListener;

// Exported constructors.

   /**
    * Construct a new server reader thread.
    *
    * @param  mailbox   Mailbox.
    * @param  listener  View listener.
    */
   public ServerReaderThread
      (DatagramSocket mailbox,
       ViewListener listener)
      {
      this.mailbox = mailbox;
      this.viewListener = listener;
      }

// Exported operations.

   /**
    * Run this server reader thread.
    */
   public void run()
      {
      byte[] buf = new byte [128];
      DatagramPacket packet = new DatagramPacket (buf, buf.length);
      ByteArrayInputStream bais;
      DataInputStream in;
      byte b;
      String host;
      try
         {
         for (;;)
            {
            mailbox.receive (packet);
            bais = new ByteArrayInputStream (buf, 0, packet.getLength());
            in = new DataInputStream (bais);
            b = in.readByte();
            switch (b)
               {
               case 'Q':
                  host = in.readUTF();
                  viewListener.query
                     (new ViewProxy (mailbox, packet.getSocketAddress()),
                      host);
                  break;
               default:
                  System.err.println ("Bad message");
                  break;
               }
            }
         }
      catch (IOException exc)
         {
         }
      finally
         {
         mailbox.close();
         }
      }

   }
